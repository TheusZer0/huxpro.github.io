---
layout: post
title: "POO para C++"
subtitle: 'POO para C++'
date: 2021-07-21 12:00:00
author: "TheusZero"
header-img: "images/post/PythonAutoayuda/solarized-wallpaper-python.png"
catalog: true
comments: true
tags:
    - Programacion
    - Python
    - USM
    - Tareas
    - Java
    - C++
---

![](/TheusZero/images/post/POO/63.png)

## Programacion en C++ Links

[]()

[]()

## Introducción a C++

diapositiva 1:

#### C++ vs C


> C++ es un lenguaje posterior a C

> C++ mantiene todo el poder de C agregando características que
facilitan la programación. C++ es compatible hacia atrás con C.

> C++ permite la programación orientada a objetos y, como las
últimas versiones de Java, permite programación genérica. A
diferencia de Java, C++ permite  crear programas en el paradigma
procedural u orientado a objetos según se necesite. ¡Incluso
mezclas entre ellos!

> C++ posee una biblioteca de funciones más amplia que C. Las
bibliotecas ya existentes de C son en su mayoría compatibles con C++

#### C++ vs Java

C++ es plataforma dependiente (Bibliotecas como Qt buscan resolver este
problema).

> C++ soporta herencia múltiple.

> C++ soporta sobrecarga de operadores (Ej: es posible dar nuevas funcionalidades
> al operador “+”).

> Mientras Java utiliza punteros, C++ soporta el uso de éstos y operaciones sobre los
> mismos de forma explícita.

> C++ soporta tanto llamadas (o paso de parámetros) por valor como por referencia,
> mientras Java solo soporta llamadas por valor

> No existe un equivalente nativo para documentación en C++ como lo hay en Java
> (Javadoc). Se puede usar Doxygen.

> C++ crea nuevos árboles de herencia en cada programa. Java tiene un solo árbol
de herencia, pues todo hereda de la clase Object.


#### Proceso de compilación en C++

> Involucra tres pasos:
>
> Preprocesamiento: El pre-procesador toma el archivo del código fuente y procesa todas las directivas
que comienzan con # (#include, #define, etc). La salida es un archivo C++ puro.
> 
> Compilación: el compilador toma la salida del pre-procesador y genera un archivo objeto (primero
assembler y luego binario de extensión .o) por cada archivo de código fuente ejecutable.
> 
> Ligado (linking): toma los archivos generados por el compilador y produce un archivo ejecutable (o
una biblioteca -no en este curso-)

![](/TheusZero/images/post/POO_C++/1.png)

#### Archivos de encabezado

ELO329 Diseño y Programación Orientados a Objetos 5
Archivos de encabezadoSon necesarios para declarar prototipos y definir constantes usadas en el programa.

Son incluidos con la directiva del pre-procesador

```#include````

Ejemplo:

```C
#include <vector>
#include <sys/socket.h>
#include “setup.h”
```

Al usar <....> la búsqueda del archivo se hace en lugares “estándares” definidos por el
compilador.

Los directorios estándares varían en cada instalación. Para ver cuáles son en tu
sistema, puedes usar:

```C
$ touch a.c  // o el comando para crear un archivo a.c vacío.$ gcc -v -E a.cMostrará los directorios a buscar para archivos 

#include <...>    e
#include “...”

```

#### Tipos de variables

```C
int
short int ( o short)
long int (o long)
unsigned int (o unsigned)
unsigned long int (o unsigned long)
unsigned short int (unsigned short)
char 
float
double
long double
bool
```

#### Acceso de Variable

**Las variables en C++ como en C, representan a los valores en sí y no
referencias a éstos**. En Java esto es así sólo para los tipos simples escalares
como int, float, double, char y boolean.

La diferencia entre C++ y Java se hace notar al manejar objetos

Objetos en Java son referencias a éstos y todos se encuentran en el heap.
Mientras que en C++ los nombres de objetos siempre se refieren al objeto mismo
y se pueden encontrar en el heap, en stack o en segmentos de datos de la
memoria.

> ```C
> //Ej: en C++
> 
> Empleado juan, pedro; // al momento de crear la variable ya se
>  // crea el objeto invocando el constructor. Distinto de Java
>  
> juan=pedro; // hace que juan tome todos los atributos de pedro.
> ```
> 
> Un cambio posterior a juan no afecta a pedro.
>
> Ésta es una gran diferencia con la semántica en Java

#### Salida de Datos

iostream debe ser incluido para hacer uso de las operaciones de entrada y
salida.

```C
#include <iostream>
using namespace std; // para usar el objeto cout
int main (void){
 cout << “Hello, world” << endl;
 return 0;
}
```

Es posible enviar datos a la salida estándar o a archivos:

```C
#include <fstream>
ofstream os (“output.dat”);
os << “The value of pi is approx. “ << 3.14159 << endl;
```

```C
#include <iostream>
#include <fstream>
using namespace std;
int main() {
int i;
ifstream fin;
fin.open("test"); // test contains 3 ints
for (int j=0;j<3;j++) {
fin >> i;
cout << i << endl;
}
fin.close();
}
```

#### Lectura desde archivo: Ejemplo

```C
#include <string>
#include <fstream>
#include <iostream>
using namespace std;
int main() {
 string s;
 ifstream fin;
 fin.open("/etc/passwd");
 while(getline(fin,s))
 cout << s << endl;
}
```

#### Operadores aritméticos

![](/TheusZero/images/post/POO_C++/2.png)

#### Asignaciones, Arreglos y Vectores

Todas asignación tiene un valor, aquel asignado. Ej: a=b=c;

ANSI C++ usa el mismo constructor de arreglo que C

Como los arreglos de C no son particularmente poderosos,
C++ incorpora vectores (no corresponde al concepto de vector
geométrico). Éstos son análogos a los ArrayList de Java.

Los vectores son una forma de plantilla (template). Una plantilla es una
declaración de clase con un tipo de dato como parámetro, su uso es
simple:
vector <X> a(n); // Ojo aún no usamos new como en Java...
crea un arreglo “crecedor” de elementos de tipo X con espacio para n
elementos.

El acceso es con: a[i]

#### Vectores

Pueden crecer según nuestra necesidad ```vector <double> a;```

En este caso a está vacío. Para hacerlo crecer:

```C
a.push_back(0.3);
a.push_back(56.2);
```

También podemos hacer que el vector crezca en varios elementos: ```a.resize(10);```

Podemos preguntar por el tamaño de un vector con a.size(); como en:

```C
for (int i=0; i < a.size(); i++)
 // ..... por más detalles ver www.cplusplus.com
```

#### Strings

En ANSI C++ tenemos acceso a una clase poderosa para string.

Ésta tiene definido el operador copia =, el operador concatenación +
y operadores relacionales ==, !=, <, <=, >, >=, entre otros.

El operador [ ] provee acceso a elementos individuales.

Existen muchos métodos en esta clase como substr para extraer un
substring:

```C
string s = “Hola a todos”;
int n = s.length(); // asigna 12
char ch = s[0];
string t = s.substr(0,4); // Substring de s[0] a s[4]
```





